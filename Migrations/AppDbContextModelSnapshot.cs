// <auto-generated />
using IndexerORM;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IndexerBenchmark.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Block", b =>
                {
                    b.Property<string>("BlockHash")
                        .HasColumnType("text");

                    b.Property<string>("Bits")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("BlockIndex")
                        .HasColumnType("bigint");

                    b.Property<long>("BlockTime")
                        .HasColumnType("bigint");

                    b.Property<string>("Merkleroot")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nonce")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PreviousBlockHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<long>("Version")
                        .HasColumnType("bigint");

                    b.HasKey("BlockHash");

                    b.ToTable("BlockTable");
                });

            modelBuilder.Entity("Input", b =>
                {
                    b.Property<string>("TXID")
                        .HasColumnType("text");

                    b.Property<long>("VOUT")
                        .HasColumnType("bigint");

                    b.Property<string>("OutpointTXID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("OutpointVOUT")
                        .HasColumnType("bigint");

                    b.Property<string>("ScriptSig")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("TXID", "VOUT");

                    b.HasIndex("OutpointTXID");

                    b.ToTable("InputTable");
                });

            modelBuilder.Entity("Output", b =>
                {
                    b.Property<string>("TXID")
                        .HasColumnType("text");

                    b.Property<long>("VOUT")
                        .HasColumnType("bigint");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ScriptPubKeyHex")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Value")
                        .HasColumnType("bigint");

                    b.HasKey("TXID", "VOUT");

                    b.ToTable("OutputTable");
                });

            modelBuilder.Entity("Transaction", b =>
                {
                    b.Property<string>("TXID")
                        .HasColumnType("text");

                    b.Property<string>("BlockHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RawTransaction")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("TXID");

                    b.HasIndex("BlockHash");

                    b.ToTable("TransactionTable");
                });

            modelBuilder.Entity("Input", b =>
                {
                    b.HasOne("Transaction", "Transaction")
                        .WithMany("Inputs")
                        .HasForeignKey("OutpointTXID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Transaction", "OutpointTransaction")
                        .WithMany()
                        .HasForeignKey("TXID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OutpointTransaction");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Output", b =>
                {
                    b.HasOne("Transaction", "Transaction")
                        .WithMany("Outputs")
                        .HasForeignKey("TXID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Transaction", b =>
                {
                    b.HasOne("Block", "Block")
                        .WithMany("Transactions")
                        .HasForeignKey("BlockHash")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Block");
                });

            modelBuilder.Entity("Block", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Transaction", b =>
                {
                    b.Navigation("Inputs");

                    b.Navigation("Outputs");
                });
#pragma warning restore 612, 618
        }
    }
}
